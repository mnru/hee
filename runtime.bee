: bottles
  dup dup to_s " bottles" swap cons print 0 == [pop] [1 - bottles] if apply ;

: twice
  dup compose apply ;

: fold
  dup quote compose [fold] compose [quote dup] dip compose unlist ;

: reverse-map
  null [swap] dig compose [cons] compose fold ;

: reverse
  null [swap cons] fold ;

: map
  reverse-map reverse ;

: length
  0 [[pop] dip 1 +] fold ;

: sum
  0 [+] fold ;

: product
  1 [*] fold ;

: null?
  [true] [pop pop false] unlist ;

: cons?
  [false] [pop pop true] unlist ;

: y'
  dup quote [y'] compose quote swap compose apply ;

: y
  quote [dup apply] swap compose [apply] compose quote [quote] swap compose [compose] compose dup apply apply ;

: !'
  swap dup 1 = [pop pop 1] [dup [-1 + swap apply] dip *] if apply ;

: !''
  swap dup 1 = [pop pop] [-1 + dup dig [[*] dip] dip apply] if apply ;

: !.1
  [!'] y' ;

: !.2
  [!'] y ;

: !.3
  dup [!''] y' ;

: !.4
  dup [!''] y ;

: +xs
  4 cons 3 cons 2 cons 1 cons 0 cons ;

: times'
  swap dup 0 = [pop pop pop] [1 - [[dup [apply] dip] dip] dip swap apply] if apply ;

: times
  [times'] y ;


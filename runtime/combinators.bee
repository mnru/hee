module prelude.combinators
  u
  y
  twice
  times

import prelude.boolean
import prelude.number

-- [f] u == [f] f
: u
  dup apply ;

-- [f] y' == [[f] y'] f
: y'
  dup quote [y'] compose swap apply ;

-- [f] y == [[f] [y] u] f
: y
  [quote [u] compose over quote swap compose swap apply] u ;

: twice
  dup compose apply ;

: times'
  swap dup zero? [pop pop pop] [1- [[dup [apply] dip] dip] dip swap u] if ;

: times
  [times'] u ;
